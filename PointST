import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RedBlackBST;

public class PointST<Value> {
	private RedBlackBST<Point2D, Value> rbt;
	
	
	/**
	 * construct an empty symbol table of points
	 */
	public PointST() {
		rbt = new RedBlackBST<Point2D, Value>();
	}
	
	/**
	 * is the symbol table empty?
	 * @return
	 */
	public boolean isEmpty() {
		return rbt.isEmpty();
	}
	
	/**
	 * @return number of points
	 */
	public int size() {
		return rbt.size();
	}
	
	/**
	 * associate the value val with point p
	 * @param p
	 * @param val
	 */
	public void put(Point2D p, Value val) {
		if (p == null || val == null) throw new NullPointerException("Arguments cannot be null");
		rbt.put(p, val);
	}
	
	/**
	 * @param p
	 * @return value associated with point p
	 */
	public Value get(Point2D p) {
		if (p == null) throw new NullPointerException("Arguments cannot be null");
		return rbt.get(p);
	}
	
	/**
	 * @param p
	 * @return does this rectangle contain the point p (either inside or on the boundary)
	 */
	public boolean contains(Point2D p) {
		if (p == null) throw new NullPointerException("Arguments cannot be null");
		return rbt.contains(p);
	}
	
	/**
	 * @return all points in the symbol table
	 */
	public Iterable<Point2D> points() {
		if (rbt.isEmpty()) return null;
		Iterable<Point2D> list = rbt.keys();
		Queue<Point2D> q = new Queue<Point2D>();
		for (Point2D key : list) {
			q.enqueue(key);
		}
		return q;
	}
	
	/**
	 * @param rect
	 * @return all points that are inside the rectangle
	 */
	public Iterable<Point2D> range(RectHV rect) {
		if (rect == null) throw new NullPointerException("Arguments cannot be null");
		Point2D min = new Point2D(rect.ymin(),rect.xmin());
		Point2D max = new Point2D(rect.ymax(),rect.xmax());
		Iterable<Point2D> list = rbt.keys(min,max);
		
		Queue<Point2D> q = new Queue<Point2D>();
		for (Point2D key : list) {
			if (rect.xmin() <= key.x() && key.x() <= rect.xmax()) {
				q.enqueue(key);
			}
		}
		
		return q;
	}
	
	/**
	 * @param p
	 * @return a nearest neighbor to point p; null if the symbol table is empty
	 */
	public Point2D nearest(Point2D p) {
		if (p == null) throw new NullPointerException("Arguments cannot be null");
		if (isEmpty()) return null;
		Point2D nearby = rbt.min();
		double distance = p.distanceSquaredTo(nearby);
		Iterable<Point2D> list = rbt.keys();
		for(Point2D key: list) {
			if (p.distanceSquaredTo(key) < distance && p.compareTo(key) != 0) {
				nearby = key;
				distance = p.distanceSquaredTo(key);
			}
		}
		return nearby;
	}
	
	public static void main(String[] args) {
		// unit testing of the methods (not graded)
	}
}
